kind: Template
apiVersion: v1
metadata:
  name: dockercoin
  annotations:
    openshift.io/display-name: "Dockercoin mining application"
    description: "Microservice example inspired from Jérôme Petazzoni orchestration-workshop."
    iconClass: fa-btc
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: rng
    labels:
      app: rng
  spec:
    triggers:
      - type: generic
        generic:
          secret: 052fc8a980b4686e
      - type: GitHub
        github:
          secret: f8e2f58321770f01
      - type: ImageChange
        imageChange: {}
      - type: ConfigChange
    source:
      type: Git
      git:
        uri: "https://github.com/surenbika/openshift-dockercoin-rng.git"
        ref: master
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: "python:3.5"
          namespace: openshift
    output:
      to:
        kind: ImageStreamTag
        name: "rng:latest"
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: rng
    name: rng
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: rng
    name: rng
  spec:
    ports:
    - name: rng-http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: rng
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: rng
      deploymentConfig: rng
    name: rng
  spec:
    replicas: 1
    selector:
      deploymentconfig: rng
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: rng
          deploymentconfig: rng
        name: rng
      spec:
        containers:
        - name: rng
          image: rng
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            name: rng-http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - rng
        from:
          kind: ImageStreamTag
          name: rng:latest
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: hasher
    labels:
      app: hasher
  spec:
    triggers:
      - type: generic
        generic:
          secret: 052fc8a980b4686e
      - type: GitHub
        github:
          secret: f8e2f58321770f01
      - type: ImageChange
        imageChange: {}
      - type: ConfigChange
    source:
      type: Git
      git:
        uri: "https://github.com/surenbika/openshift-dockercoin-hasher.git"
        ref: master
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ruby:2.3
          namespace: openshift
    output:
      to:
        kind: ImageStreamTag
        name: "hasher:latest"
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: hasher
    name: hasher
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: hasher
    name: hasher
  spec:
    ports:
    - name: hasher-http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: hasher
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: hasher
      deploymentConfig: hasher
    name: hasher
  spec:
    replicas: 1
    selector:
      deploymentconfig: hasher
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: hasher
          deploymentconfig: hasher
        name: hasher
      spec:
        containers:
        - name: hasher
          image: hasher
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            name: hasher-http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - hasher
        from:
          kind: ImageStreamTag
          name: hasher:latest
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: worker
    labels:
      app: worker
  spec:
    triggers:
      - type: generic
        generic:
          secret: 052fc8a980b4686e
      - type: GitHub
        github:
          secret: f8e2f58321770f01
      - type: ImageChange
        imageChange: {}
      - type: ConfigChange
    source:
      type: Git
      git:
        uri: "https://github.com/surenbika/openshift-dockercoin-worker.git"
        ref: master
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.5
          namespace: openshift
    output:
      to:
        kind: ImageStreamTag
        name: "worker:latest"
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: worker
    name: worker
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: worker
    name: worker
  spec:
    ports:
    - name: worker-http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: worker
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: worker
      deploymentConfig: worker
    name: worker
  spec:
    replicas: 1
    selector:
      deploymentconfig: worker
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: worker
          deploymentconfig: worker
        name: worker
      spec:
        containers:
        - name: worker
          image: worker
          imagePullPolicy: Always
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: http_proxy
              value: ""
            - name: https_proxy
              value: ""
          ports:
          - containerPort: 8080
            name: worker-http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: worker:latest
    - type: ConfigChange
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: redis
    name: redis
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: redis
      from:
        kind: DockerImage
        name: redis:latest
      name: latest
  status:
    dockerImageRepository: ""
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    generation: 1
    labels:
      app: redis
    name: redis
  spec:
    replicas: 1
    selector:
      app: redis
      deploymentconfig: redis
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis
          deploymentconfig: redis
      spec:
        containers:
        - image: redis:latest
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /data
            name: redis-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: redis-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:latest
      type: ImageChange
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: redis
    name: redis
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      deploymentconfig: redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: webui
    labels:
      app: webui
  spec:
    triggers:
      - type: generic
        generic:
          secret: 052fc8a980b4686e
      - type: GitHub
        github:
          secret: f8e2f58321770f01
      - type: ImageChange
        imageChange: {}
      - type: ConfigChange
    source:
      type: Git
      git:
        uri: "https://github.com/surenbika/openshift-dockercoin-webui.git"
        ref: master
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: openshift
    output:
      to:
        kind: ImageStreamTag
        name: "webui:latest"
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: webui
    name: webui
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: webui
    name: webui
  spec:
    ports:
    - name: webui-http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: webui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: webui
      deploymentConfig: webui
    name: webui
  spec:
    replicas: 1
    selector:
      deploymentconfig: webui
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: webui
          deploymentconfig: webui
        name: webui
      spec:
        containers:
        - name: webui
          image: webui
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            name: webui-http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - webui
        from:
          kind: ImageStreamTag
          name: webui:latest
    - type: ConfigChange
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: webui
    name: webui
  spec:
    port:
      targetPort: webui-http
    to:
      kind: Service
      name: webui
